model AssignmentSubmission {
  id             String           @id @default(uuid())
  assignment     Assignment       @relation(fields: [assignmentId], references: [id])
  assignmentId   String
  status         SubmissionStatus
  submissionText String?
  submissionUrl  String?
  files          Media[]          @relation("AssignmentSubmissionFiles")
  submittedAt    DateTime?        @default(now())
  gradedAt       DateTime?

  score    Float?
  feedback String?

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // audit fields
  createdById String
  updatedById String

  // in middleware filter out if the user grading it has Instructor role
  gradedBy   User?   @relation("GradedBy", fields: [gradedById], references: [id])
  gradedById String?

  createdBy                  User                         @relation("AssignmentSubmissionCreatedBy", fields: [createdById], references: [id])
  updatedBy                  User                         @relation("AssignmentSubmissionUpdatedBy", fields: [updatedById], references: [id])
  Profile                    Profile?                     @relation(fields: [profileId], references: [id])
  profileId                  String?
  AssignmentSubmissionAnswer AssignmentSubmissionAnswer[]
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  LATE
  GRADED
}
