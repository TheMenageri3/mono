enum EventType {
    CONFERENCE
    WORKSHOP
    NETWORKING
    HACKATHON
    CAREER_FAIR
    INFO_SESSION
}

enum EventStatus {
    DRAFT
    PUBLISHED
    CANCELLED
    COMPLETED
}

model Event {
    id                   String      @id @default(uuid())
    title                String
    description          String
    shortDescription     String
    type                 EventType
    isVirtual            Boolean
    virtualMeetingUrl    String?
    startDatetime        DateTime
    endDatetime          DateTime
    timezone             String
    registrationRequired Boolean
    registrationUrl      String?
    registrationDeadline DateTime?
    capacity             Int?
    cost                 Float?
    status               EventStatus
    featured             Boolean
    attendees            EventAttendee[]
    companies            EventCompany[]


    parentEventId String?
    parentEvent   Event?  @relation("ParentEvent", fields: [parentEventId], references: [id])
    childEvents   Event[] @relation("ParentEvent")

    locationId String
    location   Location @relation(fields: [locationId], references: [id])

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    createdById String
    createdBy   User   @relation("EventCreatedBy", fields: [createdById], references: [id])

    updatedById String
    updatedBy   User   @relation("EventUpdatedBy", fields: [updatedById], references: [id])
}

model EventAttendee {
    id String @id @default(uuid())
    eventId String
    event   Event   @relation(fields: [eventId], references: [id])
    
    userId String
    user   User   @relation("EventAttendeeUser", fields: [userId], references: [id])

    attendanceStatus EventAttendanceStatus
    attendanceType   EventAttendanceType

    notes             String?            @db.Text
    feedback          String?            @db.Text

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model EventCompany {
    id String @id @default(uuid())
    eventId String
    event   Event   @relation(fields: [eventId], references: [id])
    
    companyId String
    company   Company   @relation(fields: [companyId], references: [id])

    attendanceStatus EventAttendanceStatus
    attendanceType   EventAttendanceType

    notes             String?            @db.Text
    feedback          String?            @db.Text

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

enum EventAttendanceStatus {
    ATTENDING
    MAYBE
    NOT_ATTENDING
}

enum EventAttendanceType {
    ATTENDEE
    SPEAKER
    SPONSOR
    STAFF
    OTHER
}

enum RegistrationStatus {
    REGISTERED
    WAITLISTED  
    ATTENDED
    NO_SHOW
    CANCELLED
} 