model AdminComment {
  // Fields
  id         String     @id @default(uuid())
  visibility Visibility
  category   Category
  priority   Priority   @default(NORMAL)
  resolved   Boolean    @default(false)

  // Audit Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Audit Relations
  createdById String
  createdBy   User   @relation("AdminCommentCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("AdminCommentUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
}

enum Category {
  FEEDBACK
  EVALUATION
  INTERNAL_NOTE
  DECISION_RATIONALE
  FOLLOWUP_REQUIRED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum Visibility {
  ADMIN_ONLY
  INSTRUCTORS_ONLY
  STAFF_AND_INSTRUCTORS
  STAFF_INSTRUCTORS_AND_STUDENT
  PUBLIC
}

model Answer {
  // Fields
  id    String @id @default(uuid())
  value Json?

  // Audit Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Audit Relations
  createdById String
  createdBy   User   @relation("AnswerCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("AnswerUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  answererId String
  answerer   Profile @relation(fields: [answererId], references: [id])

  // Relationships
  questionId                  String
  question                    Question                     @relation(fields: [questionId], references: [id])
  assignmentId                String?
  assignment                  Assignment?                  @relation(fields: [assignmentId], references: [id])
  assignmentSubmissionAnswers AssignmentSubmissionAnswer[]
  classApplicationAnswers     ClassApplicationAnswer[]
  tags                        Tag[]                        @relation("AnswerTags")
}

model Assignment {
  // Fields
  id                     String           @id @default(uuid())
  title                  String
  description            String
  type                   AssignmentType
  status                 AssignmentStatus
  submissionType         SubmissionType
  submissionInstructions String
  pointsPossible         Float?
  gradingRubric          Json?
  releaseDate            DateTime?
  dueDate                DateTime?
  allowLateSubmissions   Boolean?         @default(false)
  latePenalty            Json?

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("AssignmentCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("AssignmentUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  classId     String
  class       Class                  @relation(fields: [classId], references: [id])
  submissions AssignmentSubmission[]
  tags        Tag[]                  @relation("AssignmentTags")
  questions   AssignmentQuestion[]
  answers     Answer[]
  comments    Comment[]
}

// Enums
enum AssignmentType {
  INDIVIDUAL
  GROUP
  EXAM
  PROJECT
  PREREQUISITE
}

enum AssignmentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SubmissionType {
  TEXT
  FILE
  LINK
  CODE
  MIXED
}

model AssignmentQuestion {
  // Fields
  id       String  @id @default(uuid())
  order    Int
  required Boolean
  points   Float
  section  String?

  // Audit Fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Audit Relations
  createdById String
  createdBy   User   @relation("AssignmentQuestionCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("AssignmentQuestionUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  assignment                  Assignment                   @relation(fields: [assignmentId], references: [id])
  assignmentId                String
  question                    Question                     @relation(fields: [questionId], references: [id])
  questionId                  String
  assignmentSubmissionAnswers AssignmentSubmissionAnswer[]
}

model AssignmentSubmission {
  // Fields
  id             String           @id @default(uuid())
  status         SubmissionStatus
  submissionText String?
  submissionUrl  String?
  submittedAt    DateTime?        @default(now())
  gradedAt       DateTime?
  score          Float?
  feedback       String?

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("AssignmentSubmissionCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("AssignmentSubmissionUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  gradedById  String?
  gradedBy    Profile? @relation("GradedBy", fields: [gradedById], references: [id])
  submitterId String?
  submitter   Profile? @relation(fields: [submitterId], references: [id])

  // Relationships
  assignmentId String
  assignment   Assignment                   @relation(fields: [assignmentId], references: [id])
  files        Media[]                      @relation("AssignmentSubmissionFiles")
  answers      AssignmentSubmissionAnswer[]
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  LATE
  GRADED
}

model AssignmentSubmissionAnswer {
  id                     String    @id @default(uuid())
  assignmentSubmissionId String
  questionId             String
  assignmentQuestionId   String // Added to link to AssignmentQuestion
  answerId               String? // Optional link to Answer model
  value                  Json
  feedback               String?
  pointsAwarded          Float?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  deletedAt              DateTime?
  createdById            String
  updatedById            String

  // Relations
  createdBy            User                 @relation("AssignmentSubmissionAnswerCreatedBy", fields: [createdById], references: [id])
  updatedBy            User                 @relation("AssignmentSubmissionAnswerUpdatedBy", fields: [updatedById], references: [id])
  assignmentSubmission AssignmentSubmission @relation(fields: [assignmentSubmissionId], references: [id])
  submitter            Profile              @relation(fields: [submitterId], references: [id])
  submitterId          String
  question             Question             @relation(fields: [questionId], references: [id])
  assignmentQuestion   AssignmentQuestion   @relation(fields: [assignmentQuestionId], references: [id])
  answer               Answer?              @relation(fields: [answerId], references: [id])

  @@unique([assignmentSubmissionId, questionId])
}

model Class {
  // Fields
  id                 String      @id @default(uuid())
  title              String
  description        String
  shortDescription   String
  year               Int
  quarter            QuarterType
  status             StatusType
  startDate          DateTime
  endDate            DateTime
  enrollmentCapacity Int
  syllabusUrl        String
  meetingSchedule    Json
  location           String

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("ClassCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("ClassUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  assignments        Assignment[]
  teachers           User[]             @relation("ClassTeachers")
  teachingAssistants User[]             @relation("ClassTeachingAssistants")
  enrollments        Enrollment[]
  applications       ClassApplication[]
  projects           Project[]          @relation("ClassProjects")
}

enum QuarterType {
  FALL
  WINTER
  SUMMER
  SPRING
}

enum StatusType {
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}

model ClassApplication {
  // Fields
  id          String            @id @default(uuid())
  title       String
  description String
  status      ApplicationStatus
  startDate   DateTime
  endDate     DateTime

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("ClassApplicationCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("ClassApplicationUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  classId     String
  class       Class                      @relation(fields: [classId], references: [id])
  answers     ClassApplicationAnswer[]
  questions   ClassApplicationQuestion[]
  comments    Comment[]
  applicant   Profile?                   @relation(fields: [applicantId], references: [id])
  applicantId String?
}

enum ApplicationStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

model ClassApplicationAnswer {
  // Fields
  id String @id @default(uuid())

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("ClassApplicationAnswerCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("ClassApplicationAnswerUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  questionId         String
  question           Question         @relation(fields: [questionId], references: [id])
  classApplicationId String
  classApplication   ClassApplication @relation(fields: [classApplicationId], references: [id])
  answerId           String
  answer             Answer           @relation(fields: [answerId], references: [id])
}

model ClassApplicationQuestion {
  // Fields
  id       String  @id @default(uuid())
  order    Int
  required Boolean
  points   Float
  section  String?

  // Custodial Fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Custodial Relations
  createdById String
  createdBy   User   @relation("ClassApplicationQuestionCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("ClassApplicationQuestionUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  classApplicationId String
  classApplication   ClassApplication @relation(fields: [classApplicationId], references: [id])
  questionId         String
  question           Question         @relation(fields: [questionId], references: [id])
}

model Comment {
  // Fields
  id     String        @id @default(uuid())
  text   String
  status CommentStatus

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("CommentCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("CommentUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  commenterId String
  commenter   Profile @relation("Commenter", fields: [commenterId], references: [id])

  // Relationships
  assignmentId       String?
  assignment         Assignment?       @relation(fields: [assignmentId], references: [id])
  classApplicationId String?
  application        ClassApplication? @relation(fields: [classApplicationId], references: [id])
  commentId          String?
  adminComments      AdminComment[]
}

enum CommentStatus {
  ACTIVE
  EDITED
  DELETED
}

model Company {
  // Fields
  id               String       @id @default(uuid())
  name             String
  description      String?
  logoId           String?
  website          String?
  size             CompanySize?
  foundedYear      Int?
  headquarters     String?
  locations        String[]
  missionStatement String?
  benefits         String?
  culture          String?
  active           Boolean      @default(true)
  notes            String?

  // Audit Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Audit Relations
  createdById String
  createdBy   User   @relation("CompanyCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("CompanyUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  industries  Tag[]
  contacts    CompanyContact[]
  jobPostings JobPosting[]
  media       Media[]
  profiles    Profile[]
  workHistory WorkHistory[]
  placements  Placement[]
  events      EventCompany[]
  projects    Project[]
  roles       Role[]
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

model CompanyContact {
  // Fields
  id              String          @id @default(uuid())
  title           String
  department      String?
  isPrimary       Boolean         @default(false)
  engagementLevel EngagementLevel @default(PASSIVE)
  lastContactDate DateTime?
  notes           String?

  // Audit Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Audit Relations
  createdById String
  createdBy   User   @relation("CompanyContactCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("CompanyContactUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  companyId  String
  company    Company     @relation(fields: [companyId], references: [id])
  userId     String
  user       User        @relation("CompanyContactUser", fields: [userId], references: [id])
  profileId  String?
  profile    Profile?    @relation("CompanyContactProfile", fields: [profileId], references: [id])
  roles      Role[]
  interviews Interview[]
}

enum EngagementLevel {
  ACTIVE
  RESPONSIVE
  PASSIVE
  INACTIVE
}

model Enrollment {
  // Fields
  id             String           @id @default(uuid())
  status         EnrollmentStatus
  enrollmentDate DateTime         @default(now())
  completionDate DateTime?
  finalGrade     Float?

  // Custodial Fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Custodial Relations
  createdById String
  createdBy   User   @relation("EnrollmentCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("EnrollmentUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  studentId String
  student   Profile @relation("EnrollmentStudent", fields: [studentId], references: [id])

  // Relationships
  classId String?
  class   Class?  @relation(fields: [classId], references: [id])
}

enum EnrollmentStatus {
  ENROLLED
  WAITLISTED
  DROPPED
  COMPLETED
}

model Event {
  // Fields
  id                   String      @id @default(uuid())
  title                String
  description          String
  shortDescription     String
  type                 EventType
  isVirtual            Boolean
  virtualMeetingUrl    String?
  startDatetime        DateTime
  endDatetime          DateTime
  timezone             String
  registrationRequired Boolean
  registrationUrl      String?
  registrationDeadline DateTime?
  capacity             Int?
  cost                 Float?
  status               EventStatus
  featured             Boolean

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("EventCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("EventUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  organizerId String
  organizer   Profile @relation("EventOrganizer", fields: [organizerId], references: [id])

  // Relationships
  parentEventId String?
  parentEvent   Event?          @relation("ParentEvent", fields: [parentEventId], references: [id])
  childEvents   Event[]         @relation("ParentEvent")
  locationId    String
  location      Location        @relation(fields: [locationId], references: [id])
  tags          Tag[]           @relation("EventTags")
  attendees     EventAttendee[]
  companies     EventCompany[]
}

model EventAttendee {
  // Fields
  id               String                @id @default(uuid())
  attendanceStatus EventAttendanceStatus
  attendanceType   EventAttendanceType
  notes            String?               @db.Text
  feedback         String?               @db.Text

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Profile Relations
  attendeeId String
  attendee   Profile @relation("EventAttendeeProfile", fields: [attendeeId], references: [id])

  // Relationships
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
}

model EventCompany {
  // Fields
  id               String                @id @default(uuid())
  attendanceStatus EventAttendanceStatus
  attendanceType   EventAttendanceType
  notes            String?               @db.Text
  feedback         String?               @db.Text

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  eventId   String
  event     Event   @relation(fields: [eventId], references: [id])
  companyId String
  company   Company @relation(fields: [companyId], references: [id])
}

enum EventType {
  CONFERENCE
  WORKSHOP
  NETWORKING
  HACKATHON
  CAREER_FAIR
  INFO_SESSION
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum EventAttendanceStatus {
  ATTENDING
  MAYBE
  NOT_ATTENDING
}

enum EventAttendanceType {
  ATTENDEE
  SPEAKER
  SPONSOR
  STAFF
  OTHER
}

enum RegistrationStatus {
  REGISTERED
  WAITLISTED
  ATTENDED
  NO_SHOW
  CANCELLED
}

model Industry {
  // Fields
  id          String @id @default(uuid())
  name        String
  description String

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("IndustryCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("IndustryUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  parentIndustry       Industry?            @relation("IndustryHierarchy", fields: [parentIndustryId], references: [id])
  parentIndustryId     String?
  subIndustries        Industry[]           @relation("IndustryHierarchy")
  jobPostingIndustries JobPostingIndustry[]
}

model Interview {
  // Fields
  id                    String                @id @default(uuid())
  type                  InterviewType
  scheduledDate         DateTime
  durationMinutes       Int
  interviewLocationType InterviewLocationType
  preparationNotes      String?
  status                InterviewStatus
  feedback              String?
  candidateFeedback     String?
  nextSteps             String?

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("InterviewCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("InterviewUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  intervieweeId String
  interviewee   Profile   @relation("InterviewInterviewee", fields: [intervieweeId], references: [id])
  interviewers  Profile[] @relation("InterviewInterviewers")

  // Relationships
  jobApplicationId String
  jobApplication   JobApplication  @relation(fields: [jobApplicationId], references: [id])
  companyContactId String?
  companyContact   CompanyContact? @relation(fields: [companyContactId], references: [id])

  @@index([jobApplicationId])
  @@index([companyContactId])
  @@index([createdById])
  @@index([updatedById])
  @@map("interviews")
}

enum InterviewType {
  PHONE_SCREEN
  TECHNICAL
  BEHAVIORAL
  ONSITE
  FINAL
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum InterviewLocationType {
  PHYSICAL
  VIRTUAL
}

model JobApplication {
  // Fields
  id                     String               @id @default(uuid())
  coverLetter            String?
  additionalMaterialsIds String[] // Array of Media IDs
  status                 JobApplicationStatus @default(DRAFT)
  referralSource         String?
  submissionDate         DateTime?
  withdrawnDate          DateTime?
  withdrawnReason        String?
  internalNotes          String?

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("JobApplicationCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("JobApplicationUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  applicantId       String
  applicant         Profile  @relation("JobApplicant", fields: [applicantId], references: [id])
  referralProfileId String?
  referralProfile   Profile? @relation("JobApplicationReferral", fields: [referralProfileId], references: [id])

  // Relationships
  jobPostingId            String
  jobPosting              JobPosting               @relation(fields: [jobPostingId], references: [id])
  resumeId                String
  resume                  Media?                   @relation("Resume", fields: [resumeId], references: [id])
  interviews              Interview[]
  jobApplicationQuestions JobApplicationQuestion[]
  placements              Placement[]
}

enum JobApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  INTERVIEWING
  OFFERED
  ACCEPTED
  DECLINED
  REJECTED
}

model JobApplicationQuestion {
  // Fields
  id       String  @id @default(uuid())
  order    Int
  required Boolean
  points   Float
  section  String?

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("JobApplicationQuestionCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("JobApplicationQuestionUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id])
  jobApplicationId String
  question         Question       @relation(fields: [questionId], references: [id])
  questionId       String
}

model JobPosting {
  // Fields
  id                      String                    @id @default(uuid())
  title                   String
  description             String
  shortDescription        String
  location                String
  remoteOption            JobPostingRemoteOption
  employmentType          JobPostingEmploymentType
  experienceLevel         JobPostingExperienceLevel
  educationRequirements   String?
  salaryMin               Float?
  salaryMax               Float?
  benefits                String?
  applicationInstructions String?
  externalPostingUrl      String?
  internalNotes           String?
  status                  JobPostingStatus          @default(DRAFT)
  postedDate              DateTime?
  deadlineDate            DateTime?

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("JobPostingCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("JobPostingUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  hiringManagerId String
  hiringManager   Profile @relation("JobPostingHiringManager", fields: [hiringManagerId], references: [id])

  // Relationships
  companyId  String
  company    Company              @relation(fields: [companyId], references: [id])
  industries JobPostingIndustry[]
  applicants JobApplication[]
}

model JobPostingIndustry {
  // Fields
  jobPostingId String
  industryId   String

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("JobPostingIndustryCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("JobPostingIndustryUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  jobPosting JobPosting @relation(fields: [jobPostingId], references: [id])
  industry   Industry   @relation(fields: [industryId], references: [id])

  @@id([jobPostingId, industryId])
}

// Enums
enum JobPostingRemoteOption {
  ON_SITE
  HYBRID
  REMOTE
}

enum JobPostingEmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum JobPostingExperienceLevel {
  ENTRY
  MID
  SENIOR
  EXECUTIVE
}

enum JobPostingStatus {
  DRAFT
  OPEN
  FILLED
  CLOSED
}

model Location {
  // Fields
  id            String       @id @default(uuid())
  name          String
  addressLine1  String
  addressLine2  String?
  city          String
  stateProvince String
  postalCode    String
  country       String
  latitude      Float
  longitude     Float
  type          LocationType
  capacity      Int?
  notes         String?

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("LocationCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("LocationUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  events  Event[]
  profile Profile[]         @relation("LocationProfile")
  contact VenueContactInfo?

  @@index([createdById])
  @@index([updatedById])
  @@map("locations")
}

// Enums
enum LocationType {
  CAMPUS
  OFFICE
  VENUE
  REMOTE
}

model Media {
  // Fields
  id               String      @id @default(uuid())
  title            String
  type             MediaType
  storageType      StorageType
  url              String
  originalFilename String?
  sizeInBytes      Int?
  mimeType         String?
  metadata         Json? // Type-specific attributes stored as JSON

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("MediaCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("MediaUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  profileId             String?
  profile               Profile?               @relation("ProfileMedia", fields: [profileId], references: [id])
  companyId             String?
  company               Company?               @relation(fields: [companyId], references: [id])
  assignmentSubmissions AssignmentSubmission[] @relation("AssignmentSubmissionFiles")
  jobApplications       JobApplication[]       @relation("Resume")
  profilePictures       Profile[]              @relation("ProfilePicture")
  projects              Project[]
}

// Enums
enum MediaType {
  VIDEO
  IMAGE
  PDF
  AUDIO
  DOCUMENT
  OTHER
}

//do check the storage types here and add/remove as needed
enum StorageType {
  LOCAL
  YOUTUBE
  S3
  CLOUDINARY
  EXTERNAL
}

model Placement {
  // Fields
  id                  String         @id @default(uuid())
  jobTitle            String
  employmentType      EmploymentType
  startDate           DateTime
  endDate             DateTime?
  isCurrent           Boolean
  salary              Float
  compensationDetails String?
  matchQuality        MatchQuality
  verified            Boolean        @default(false)
  verificationDate    DateTime?

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("PlacementCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("PlacementUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  profileId              String
  profile                Profile @relation("ProfilePlacements", fields: [profileId], references: [id])
  placementFacilitatorId String
  placementFacilitator   Profile @relation("PlacementFacilitator", fields: [placementFacilitatorId], references: [id])

  // Relationships
  companyId         String
  company           Company             @relation(fields: [companyId], references: [id])
  jobApplicationId  String?
  jobApplication    JobApplication?     @relation(fields: [jobApplicationId], references: [id])
  placementFeedback PlacementFeedback[]

  @@index([profileId])
  @@index([companyId])
  @@index([jobApplicationId])
  @@index([placementFacilitatorId])
  @@index([createdById])
  @@index([updatedById])
  @@map("placements")
}

// Enums
enum MatchQuality {
  EXCELLENT
  GOOD
  FAIR
  POOR
}

model PlacementFeedback {
  // Fields
  id                     String            @id @default(uuid())
  feedbackType           FeedbackType
  satisfactionLevel      SatisfactionLevel
  preparednessRating     Int // (1-5 scale)
  skillsMatchRating      Int // (1-5 scale)
  cultureFitRating       Int // (1-5 scale)
  feedbackText           String            @db.Text
  improvementSuggestions String?           @db.Text
  followUpNeeded         Boolean           @default(false)

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("FeedbackCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("FeedbackUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  respondentId String
  respondent   Profile @relation("FeedbackRespondent", fields: [respondentId], references: [id])

  // Relationships
  placementId String
  placement   Placement @relation(fields: [placementId], references: [id])

  @@index([placementId])
  @@index([respondentId])
  @@index([createdById])
  @@index([updatedById])
  @@map("placement_feedback")
}

// Enums
enum FeedbackType {
  STUDENT
  EMPLOYER
  ADMIN
}

enum SatisfactionLevel {
  VERY_SATISFIED
  SATISFIED
  NEUTRAL
  DISSATISFIED
  VERY_DISSATISFIED
}

model Profile {
  // Core Fields
  id                      String  @id @default(uuid())
  firstName               String
  lastName                String
  username                String?
  jobTitle                String?
  department              String?
  bio                     String?
  email                   String
  phoneNumber             String
  timezone                String?
  languagePreference      String?
  notificationPreferences Json?
  walletAddress           String? @unique
  onboardingCompleted     Boolean @default(false)

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  user             User      @relation(fields: [userId], references: [id])
  userId           String    @unique
  createdBy        User      @relation("ProfileCreatedBy", fields: [createdById], references: [id])
  createdById      String
  updatedBy        User      @relation("ProfileUpdatedBy", fields: [updatedById], references: [id])
  updatedById      String
  location         Location? @relation("LocationProfile", fields: [locationId], references: [id])
  locationId       String?
  company          Company?  @relation(fields: [companyId], references: [id])
  companyId        String?
  profilePicture   Media?    @relation("ProfilePicture", fields: [profilePictureId], references: [id])
  profilePictureId String?   @unique
  answers          Answer[]

  // Application & Assignment Relationships
  applicationResponses        ClassApplication[]
  assignmentSubmissions       AssignmentSubmission[]
  assignmentSubmissionAnswers AssignmentSubmissionAnswer[]
  gradedAssignmentSubmissions AssignmentSubmission[]       @relation("GradedBy")
  projectCollaborations       ProjectCollaborator[]        @relation("ProjectCollaboratorProfile")
  enrollments                 Enrollment[]                 @relation("EnrollmentStudent")
  jobApplications             JobApplication[]             @relation("JobApplicant")
  referredJobApplications     JobApplication[]             @relation("JobApplicationReferral")

  // Skills & Tags
  skills         UserSkill[]
  endorsedSkills UserSkill[] @relation("SkillEndorsements")
  tags           Tag[]       @relation("ProfileTags")

  // Work & Company Relationships
  workHistory           WorkHistory[]       @relation("WorkHistoryProfile")
  companyContacts       CompanyContact[]    @relation("CompanyContactProfile")
  managedJobPostings    JobPosting[]        @relation("JobPostingHiringManager")
  placements            Placement[]         @relation("ProfilePlacements")
  facilitatedPlacements Placement[]         @relation("PlacementFacilitator")
  placementFeedback     PlacementFeedback[] @relation("FeedbackRespondent")
  roles                 Role[]              @relation("RoleProfile")

  // Project Relationships
  ownedProjects Project[] @relation("ProjectOwner")

  // Media
  media    Media[]   @relation("ProfileMedia")
  comments Comment[] @relation("Commenter")

  // Event Relationships
  organizedEvents  Event[]         @relation("EventOrganizer")
  eventAttendances EventAttendee[] @relation("EventAttendeeProfile")

  // Interview Relationships
  interviewsAsInterviewee Interview[] @relation("InterviewInterviewee")
  interviewsAsInterviewer Interview[] @relation("InterviewInterviewers")

  // Wallet Relationships
  wallets Wallet[] @relation("WalletProfile")

  // Social & Custom Fields
  socialMediaLinks Json?
  customFields     Json?
}

model Project {
  // Fields
  id               String           @id @default(uuid())
  title            String
  description      String
  shortDescription String
  status           ProjectStatus
  visibility       VisibilityStatus
  githubUrl        String?          @db.VarChar(2048)
  demoUrl          String?          @db.VarChar(2048)
  outcome          String?
  challenges       String?
  isFeatured       Boolean          @default(false)
  startDate        DateTime
  endDate          DateTime?

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("CreatedProjects", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("UpdatedProjects", fields: [updatedById], references: [id])

  // Profile Relations
  ownerId String?
  owner   Profile? @relation("ProjectOwner", fields: [ownerId], references: [id])

  // Relationships
  classId       String?
  class         Class?                @relation("ClassProjects", fields: [classId], references: [id])
  media         Media[]
  collaborators ProjectCollaborator[]
  companies     Company[]
  tags          Tag[]                 @relation("ProjectTags")
  skills        UserSkill[]           @relation("UserSkillProjects")
}

// Enums
enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum VisibilityStatus {
  PRIVATE
  PUBLIC
  INTERNAL
}

model ProjectCollaborator {
  // Fields
  id            String @id @default(uuid())
  role          String
  contributions String

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("ProjectCollaboratorCreatedBy", fields: [createdById], references: [id])

  updatedById String
  updatedBy   User   @relation("ProjectCollaboratorUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  profileId String?
  profile   Profile? @relation("ProjectCollaboratorProfile", fields: [profileId], references: [id])

  // Relationships
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  userId String
  user   User   @relation("ProjectCollaboratorUser", fields: [userId], references: [id])

  tags Tag[] @relation("ProjectCollaboratorTags")
}

// Enums
enum QuestionType {
  NUMBER
  TEXT
  SELECT
  MULTISELECT
  SCALE
  DATE
}

model Question {
  // Fields
  id          String       @id @default(uuid())
  text        String
  description String?
  type        QuestionType
  required    Boolean
  order       Int
  metadata    Json?

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("QuestionCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("QuestionUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  assignmentQuestions         AssignmentQuestion[]
  classApplicationQuestions   ClassApplicationQuestion[]
  jobApplicationQuestions     JobApplicationQuestion[]
  tags                        Tag[]                        @relation("QuestionTags")
  answers                     Answer[]
  assignmentSubmissionAnswers AssignmentSubmissionAnswer[]
  classApplicationAnswers     ClassApplicationAnswer[]
}

model Role {
  // Fields
  id          String       @id @default(uuid())
  name        String // e.g., "CTO", "Head of BD", "Engineering Manager"
  description String // brief explanation of the role
  category    RoleCategory // e.g., "executive", "management", etc.
  department  String? // department this role typically belongs to
  level       RoleLevel // e.g., "entry", "mid", "senior", etc.
  isInternal  Boolean // whether used for internal roles vs external company contacts

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("RoleCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("RoleUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  profileId String
  profile   Profile @relation("RoleProfile", fields: [profileId], references: [id])

  // Relationships
  companyId       String
  company         Company          @relation(fields: [companyId], references: [id])
  companyContacts CompanyContact[]
}

// Enums
enum RoleCategory {
  EXECUTIVE
  MANAGEMENT
  TECHNICAL
  BUSINESS
  OPERATIONS
  OTHER
}

enum RoleLevel {
  ENTRY
  MID
  SENIOR
  DIRECTOR
  EXECUTIVE
  C_SUITE
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// nextauth required schemas execpt user

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Section {
  // Fields
  id       String @id @default(uuid())
  header   String
  metadata Json

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("SectionCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("SectionUpdatedBy", fields: [updatedById], references: [id])
}

model Tag {
  // Fields
  tagname String @id
  color   String

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("TagCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("TagUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  projects                Project[]             @relation("ProjectTags")
  profiles                Profile[]             @relation("ProfileTags")
  answers                 Answer[]              @relation("AnswerTags")
  assignments             Assignment[]          @relation("AssignmentTags")
  events                  Event[]               @relation("EventTags")
  companies               Company[]
  projectCollaboratorTags ProjectCollaborator[] @relation("ProjectCollaboratorTags")
  question                Question[]            @relation("QuestionTags")
  userSkills              UserSkill[]           @relation("UserSkillTags")
}

model User {
  // Core Fields
  id             String     @id @default(uuid())
  email          String     @unique
  hashedPassword String
  emailVerified  DateTime?
  image          String?
  name           String?
  role           UserRole
  status         UserStatus
  lastLogin      DateTime?

  // Authentication
  accounts      Account[]
  sessions      Session[]
  authenticator Authenticator[]

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  profile Profile?

  // Admin Comments
  adminCommentsCreated AdminComment[] @relation("AdminCommentCreatedBy")
  adminCommentsUpdated AdminComment[] @relation("AdminCommentUpdatedBy")

  // Answers
  answersCreated Answer[] @relation("AnswerCreatedBy")
  answersUpdated Answer[] @relation("AnswerUpdatedBy")

  // Assignments
  assignmentsCreated                 Assignment[]                 @relation("AssignmentCreatedBy")
  assignmentsUpdated                 Assignment[]                 @relation("AssignmentUpdatedBy")
  assignmentQuestionsCreated         AssignmentQuestion[]         @relation("AssignmentQuestionCreatedBy")
  assignmentQuestionsUpdated         AssignmentQuestion[]         @relation("AssignmentQuestionUpdatedBy")
  assignmentSubmissionsCreated       AssignmentSubmission[]       @relation("AssignmentSubmissionCreatedBy")
  assignmentSubmissionsUpdated       AssignmentSubmission[]       @relation("AssignmentSubmissionUpdatedBy")
  assignmentSubmissionAnswersCreated AssignmentSubmissionAnswer[] @relation("AssignmentSubmissionAnswerCreatedBy")
  assignmentSubmissionAnswersUpdated AssignmentSubmissionAnswer[] @relation("AssignmentSubmissionAnswerUpdatedBy")

  // Classes
  classesCreated            Class[] @relation("ClassCreatedBy")
  classesUpdated            Class[] @relation("ClassUpdatedBy")
  classesTeaching           Class[] @relation("ClassTeachers")
  classesTeachingAssistants Class[] @relation("ClassTeachingAssistants")

  // Class Applications
  classApplicationsCreated         ClassApplication[]         @relation("ClassApplicationCreatedBy")
  classApplicationsUpdated         ClassApplication[]         @relation("ClassApplicationUpdatedBy")
  classApplicationAnswersCreated   ClassApplicationAnswer[]   @relation("ClassApplicationAnswerCreatedBy")
  classApplicationAnswersUpdated   ClassApplicationAnswer[]   @relation("ClassApplicationAnswerUpdatedBy")
  classApplicationQuestionsCreated ClassApplicationQuestion[] @relation("ClassApplicationQuestionCreatedBy")
  classApplicationQuestionsUpdated ClassApplicationQuestion[] @relation("ClassApplicationQuestionUpdatedBy")

  // Comments
  commentsCreated Comment[] @relation("CommentCreatedBy")
  commentsUpdated Comment[] @relation("CommentUpdatedBy")

  // Company
  companyCreated         Company[]        @relation("CompanyCreatedBy")
  companyUpdated         Company[]        @relation("CompanyUpdatedBy")
  companyContactsCreated CompanyContact[] @relation("CompanyContactCreatedBy")
  companyContactsUpdated CompanyContact[] @relation("CompanyContactUpdatedBy")
  companyContactUser     CompanyContact[] @relation("CompanyContactUser")

  // Enrollment
  enrollmentCreated Enrollment[] @relation("EnrollmentCreatedBy")
  enrollmentUpdated Enrollment[] @relation("EnrollmentUpdatedBy")

  // Events
  eventCreated Event[] @relation("EventCreatedBy")
  eventUpdated Event[] @relation("EventUpdatedBy")

  // Industry
  industryCreated Industry[] @relation("IndustryCreatedBy")
  industryUpdated Industry[] @relation("IndustryUpdatedBy")

  // Interviews
  interviewCreated Interview[] @relation("InterviewCreatedBy")
  interviewUpdated Interview[] @relation("InterviewUpdatedBy")

  // Job Applications
  jobApplicationsCreated         JobApplication[]         @relation("JobApplicationCreatedBy")
  jobApplicationsUpdated         JobApplication[]         @relation("JobApplicationUpdatedBy")
  jobApplicationQuestionsCreated JobApplicationQuestion[] @relation("JobApplicationQuestionCreatedBy")
  jobApplicationQuestionsUpdated JobApplicationQuestion[] @relation("JobApplicationQuestionUpdatedBy")

  // Job Postings
  jobPostingIndustriesCreated JobPostingIndustry[] @relation("JobPostingIndustryCreatedBy")
  jobPostingIndustriesUpdated JobPostingIndustry[] @relation("JobPostingIndustryUpdatedBy")
  jobPostingsCreated          JobPosting[]         @relation("JobPostingCreatedBy")
  jobPostingsUpdated          JobPosting[]         @relation("JobPostingUpdatedBy")

  // Location
  locationCreated Location[] @relation("LocationCreatedBy")
  locationUpdated Location[] @relation("LocationUpdatedBy")

  // Media
  mediaCreated Media[] @relation("MediaCreatedBy")
  mediaUpdated Media[] @relation("MediaUpdatedBy")

  // Placements
  placementCreated         Placement[]         @relation("PlacementCreatedBy")
  placementUpdated         Placement[]         @relation("PlacementUpdatedBy")
  placementFeedbackCreated PlacementFeedback[] @relation("FeedbackCreatedBy")
  placementFeedbackUpdated PlacementFeedback[] @relation("FeedbackUpdatedBy")

  // Profile
  profileCreated Profile[] @relation("ProfileCreatedBy")
  profileUpdated Profile[] @relation("ProfileUpdatedBy")

  // Projects
  projectCreated             Project[]             @relation("CreatedProjects")
  projectUpdated             Project[]             @relation("UpdatedProjects")
  projectCollaboratorCreated ProjectCollaborator[] @relation("ProjectCollaboratorCreatedBy")
  projectCollaboratorUpdated ProjectCollaborator[] @relation("ProjectCollaboratorUpdatedBy")
  projectCollaborator        ProjectCollaborator[] @relation("ProjectCollaboratorUser")

  // Questions
  questionCreated Question[] @relation("QuestionCreatedBy")
  questionUpdated Question[] @relation("QuestionUpdatedBy")

  // Roles
  roleCreated Role[] @relation("RoleCreatedBy")
  roleUpdated Role[] @relation("RoleUpdatedBy")

  // Sections
  sectionCreated Section[] @relation("SectionCreatedBy")
  sectionUpdated Section[] @relation("SectionUpdatedBy")

  // Tags
  tagCreated Tag[] @relation("TagCreatedBy")
  tagUpdated Tag[] @relation("TagUpdatedBy")

  // User Skills
  userSkillCreated UserSkill[] @relation("UserSkillCreatedBy")
  userSkillUpdated UserSkill[] @relation("UserSkillUpdatedBy")

  // Venue Contact Info
  venueContactInfoCreated VenueContactInfo[] @relation("ContactInfoCreatedBy")
  venueContactInfoUpdated VenueContactInfo[] @relation("ContactInfoUpdatedBy")

  // Wallet
  walletCreated Wallet[] @relation("WalletCreatedBy")
  walletUpdated Wallet[] @relation("WalletUpdatedBy")

  // Work History
  workHistoryCreated WorkHistory[] @relation("WorkHistoryCreatedBy")
  workHistoryUpdated WorkHistory[] @relation("WorkHistoryUpdatedBy")
}

enum UserRole {
  ADMIN
  STANDARD
  INSTRUCTOR
  MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  DELETED
}

model UserSkill {
  // Fields
  id         String  @id @default(uuid())
  tagname    String //skill name pointing to tags
  selfRating Float? // optional self-assessment (0.0 - 5.0)
  notes      String? // optional custom annotation

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("UserSkillCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("UserSkillUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id])
  endorsedBy Profile[] @relation("SkillEndorsements")

  // Relationships
  tag         Tag           @relation("UserSkillTags", fields: [tagname], references: [tagname])
  projects    Project[]     @relation("UserSkillProjects")
  workHistory WorkHistory[]
}

model VenueContactInfo {
  // Fields
  id          String  @id @default(uuid())
  email       String?
  phone       String?
  website     String?
  contactName String?
  department  String?

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("ContactInfoCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("ContactInfoUpdatedBy", fields: [updatedById], references: [id])

  // Relationships
  locationId String   @unique
  location   Location @relation(fields: [locationId], references: [id])

  @@index([locationId])
  @@index([createdById])
  @@index([updatedById])
  @@map("contact_info")
}

model Wallet {
  // Fields
  publicKey String  @id
  active    Boolean

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("WalletCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("WalletUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  profileId String
  profile   Profile @relation("WalletProfile", fields: [profileId], references: [id])
}

model WorkHistory {
  // Fields
  id             String         @id @default(uuid())
  companyName    String
  title          String
  description    String
  startDate      DateTime
  endDate        DateTime?
  isCurrent      Boolean
  location       String
  employmentType EmploymentType
  achievements   String?
  references     String?
  verified       Boolean

  // Custodial Fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Custodial Relations
  createdById String
  createdBy   User   @relation("WorkHistoryCreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User   @relation("WorkHistoryUpdatedBy", fields: [updatedById], references: [id])

  // Profile Relations
  profileId String?
  profile   Profile? @relation("WorkHistoryProfile", fields: [profileId], references: [id])

  // Relationships
  companyId String?
  company   Company?    @relation(fields: [companyId], references: [id])
  skills    UserSkill[]
}

// Enums
enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}
